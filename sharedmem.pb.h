// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharedmem.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharedmem_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sharedmem_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sharedmem_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharedmem_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sharedmem_2eproto;
namespace shmmsg {
class Client;
struct ClientDefaultTypeInternal;
extern ClientDefaultTypeInternal _Client_default_instance_;
class Server;
struct ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
}  // namespace shmmsg
PROTOBUF_NAMESPACE_OPEN
template<> ::shmmsg::Client* Arena::CreateMaybeMessage<::shmmsg::Client>(Arena*);
template<> ::shmmsg::Server* Arena::CreateMaybeMessage<::shmmsg::Server>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace shmmsg {

enum Client_ClientType : int {
  Client_ClientType_WRITER = 0,
  Client_ClientType_READER = 1
};
bool Client_ClientType_IsValid(int value);
constexpr Client_ClientType Client_ClientType_ClientType_MIN = Client_ClientType_WRITER;
constexpr Client_ClientType Client_ClientType_ClientType_MAX = Client_ClientType_READER;
constexpr int Client_ClientType_ClientType_ARRAYSIZE = Client_ClientType_ClientType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Client_ClientType_descriptor();
template<typename T>
inline const std::string& Client_ClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Client_ClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Client_ClientType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Client_ClientType_descriptor(), enum_t_value);
}
inline bool Client_ClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Client_ClientType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Client_ClientType>(
    Client_ClientType_descriptor(), name, value);
}
enum Server_Response : int {
  Server_Response_SUCCESS = 0,
  Server_Response_ERROR = 1
};
bool Server_Response_IsValid(int value);
constexpr Server_Response Server_Response_Response_MIN = Server_Response_SUCCESS;
constexpr Server_Response Server_Response_Response_MAX = Server_Response_ERROR;
constexpr int Server_Response_Response_ARRAYSIZE = Server_Response_Response_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Server_Response_descriptor();
template<typename T>
inline const std::string& Server_Response_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Server_Response>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Server_Response_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Server_Response_descriptor(), enum_t_value);
}
inline bool Server_Response_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Server_Response* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Server_Response>(
    Server_Response_descriptor(), name, value);
}
// ===================================================================

class Client final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shmmsg.Client) */ {
 public:
  inline Client() : Client(nullptr) {}
  ~Client() override;
  explicit constexpr Client(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Client(const Client& from);
  Client(Client&& from) noexcept
    : Client() {
    *this = ::std::move(from);
  }

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }
  inline Client& operator=(Client&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Client& default_instance() {
    return *internal_default_instance();
  }
  static inline const Client* internal_default_instance() {
    return reinterpret_cast<const Client*>(
               &_Client_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Client& a, Client& b) {
    a.Swap(&b);
  }
  inline void Swap(Client* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Client* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Client* New() const final {
    return new Client();
  }

  Client* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Client>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Client& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Client& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Client* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shmmsg.Client";
  }
  protected:
  explicit Client(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Client_ClientType ClientType;
  static constexpr ClientType WRITER =
    Client_ClientType_WRITER;
  static constexpr ClientType READER =
    Client_ClientType_READER;
  static inline bool ClientType_IsValid(int value) {
    return Client_ClientType_IsValid(value);
  }
  static constexpr ClientType ClientType_MIN =
    Client_ClientType_ClientType_MIN;
  static constexpr ClientType ClientType_MAX =
    Client_ClientType_ClientType_MAX;
  static constexpr int ClientType_ARRAYSIZE =
    Client_ClientType_ClientType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ClientType_descriptor() {
    return Client_ClientType_descriptor();
  }
  template<typename T>
  static inline const std::string& ClientType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientType_Name.");
    return Client_ClientType_Name(enum_t_value);
  }
  static inline bool ClientType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClientType* value) {
    return Client_ClientType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kClientFieldNumber = 1,
  };
  // optional string msg = 2;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // optional .shmmsg.Client.ClientType client = 1 [default = READER];
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  ::shmmsg::Client_ClientType client() const;
  void set_client(::shmmsg::Client_ClientType value);
  private:
  ::shmmsg::Client_ClientType _internal_client() const;
  void _internal_set_client(::shmmsg::Client_ClientType value);
  public:

  // @@protoc_insertion_point(class_scope:shmmsg.Client)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  int client_;
  friend struct ::TableStruct_sharedmem_2eproto;
};
// -------------------------------------------------------------------

class Server final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:shmmsg.Server) */ {
 public:
  inline Server() : Server(nullptr) {}
  ~Server() override;
  explicit constexpr Server(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Server& default_instance() {
    return *internal_default_instance();
  }
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Server* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return new Server();
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Server& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Server& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "shmmsg.Server";
  }
  protected:
  explicit Server(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Server_Response Response;
  static constexpr Response SUCCESS =
    Server_Response_SUCCESS;
  static constexpr Response ERROR =
    Server_Response_ERROR;
  static inline bool Response_IsValid(int value) {
    return Server_Response_IsValid(value);
  }
  static constexpr Response Response_MIN =
    Server_Response_Response_MIN;
  static constexpr Response Response_MAX =
    Server_Response_Response_MAX;
  static constexpr int Response_ARRAYSIZE =
    Server_Response_Response_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Response_descriptor() {
    return Server_Response_descriptor();
  }
  template<typename T>
  static inline const std::string& Response_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Response>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Response_Name.");
    return Server_Response_Name(enum_t_value);
  }
  static inline bool Response_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Response* value) {
    return Server_Response_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // optional .shmmsg.Server.Response response = 1 [default = ERROR];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  ::shmmsg::Server_Response response() const;
  void set_response(::shmmsg::Server_Response value);
  private:
  ::shmmsg::Server_Response _internal_response() const;
  void _internal_set_response(::shmmsg::Server_Response value);
  public:

  // @@protoc_insertion_point(class_scope:shmmsg.Server)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int response_;
  friend struct ::TableStruct_sharedmem_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Client

// optional .shmmsg.Client.ClientType client = 1 [default = READER];
inline bool Client::_internal_has_client() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Client::has_client() const {
  return _internal_has_client();
}
inline void Client::clear_client() {
  client_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::shmmsg::Client_ClientType Client::_internal_client() const {
  return static_cast< ::shmmsg::Client_ClientType >(client_);
}
inline ::shmmsg::Client_ClientType Client::client() const {
  // @@protoc_insertion_point(field_get:shmmsg.Client.client)
  return _internal_client();
}
inline void Client::_internal_set_client(::shmmsg::Client_ClientType value) {
  assert(::shmmsg::Client_ClientType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  client_ = value;
}
inline void Client::set_client(::shmmsg::Client_ClientType value) {
  _internal_set_client(value);
  // @@protoc_insertion_point(field_set:shmmsg.Client.client)
}

// optional string msg = 2;
inline bool Client::_internal_has_msg() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Client::has_msg() const {
  return _internal_has_msg();
}
inline void Client::clear_msg() {
  msg_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Client::msg() const {
  // @@protoc_insertion_point(field_get:shmmsg.Client.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Client::set_msg(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:shmmsg.Client.msg)
}
inline std::string* Client::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:shmmsg.Client.msg)
  return _s;
}
inline const std::string& Client::_internal_msg() const {
  return msg_.Get();
}
inline void Client::_internal_set_msg(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Client::_internal_mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Client::release_msg() {
  // @@protoc_insertion_point(field_release:shmmsg.Client.msg)
  if (!_internal_has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Client::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:shmmsg.Client.msg)
}

// -------------------------------------------------------------------

// Server

// optional .shmmsg.Server.Response response = 1 [default = ERROR];
inline bool Server::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Server::has_response() const {
  return _internal_has_response();
}
inline void Server::clear_response() {
  response_ = 1;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::shmmsg::Server_Response Server::_internal_response() const {
  return static_cast< ::shmmsg::Server_Response >(response_);
}
inline ::shmmsg::Server_Response Server::response() const {
  // @@protoc_insertion_point(field_get:shmmsg.Server.response)
  return _internal_response();
}
inline void Server::_internal_set_response(::shmmsg::Server_Response value) {
  assert(::shmmsg::Server_Response_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  response_ = value;
}
inline void Server::set_response(::shmmsg::Server_Response value) {
  _internal_set_response(value);
  // @@protoc_insertion_point(field_set:shmmsg.Server.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shmmsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::shmmsg::Client_ClientType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shmmsg::Client_ClientType>() {
  return ::shmmsg::Client_ClientType_descriptor();
}
template <> struct is_proto_enum< ::shmmsg::Server_Response> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::shmmsg::Server_Response>() {
  return ::shmmsg::Server_Response_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sharedmem_2eproto
